heat_template_version: 2014-10-16

description: >
  userdata : userdata node

parameters:
  http_proxy:
    type: string
    description: http_proxy
    default: ""
  no_proxy:
    type: string
    description: no_proxy
    default: ""
  deploy_account:
    type: string
    description: service_account
    default: ""
  deploy_account_ssh:
    type: string
    description: service_account_ssh
    default: ""
  deploy_private_key:
    type: string
    description: deploy_private_key
    default: ""
  deploy_public_key:
    type: string
    description: deploy_public_key
    default: ""
  dns_nameservers:
    type: comma_delimited_list
    label: DNS nameservers
    description: 8.8.8.8,8.8.4.4
  dns_domainname:
    type: comma_delimited_list
    label: DNS dns_domainname
    description: domain.fr,domain.net
  stack:
    type: string
    default: ""
  context:
    type: string
    default: ""
  front_bastion_subnet_prefix:
    type: string
    description: define ip format for bastion x.x.x.x{index}
    default: ""
  front_subnet_prefix:
    type: string
    description: define ip format for node x.x.x.x{index}
    default: ""
  front_node_count:
    type: number
    description: define the count of instance
    default: 1
  bastion_node_count:
    type: number
    description: define the count of instance
    default: 1
  backup_account:
    type: string
    description: backup_account
    default: "backup"
  env_file_system:
    type: string
    description: file system mounted
    default: "/DATA"
  git_srv:
    type: string
    description: git_srv
    default: "localhost"
  git_user:
    type: string
    description: git_srv
    default: "user"
  git_password:
    type: string
    description: git_password
    default: "password"

resources:
  userdata:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_attr: [CloudConfigInit, userdata] }
      - config: { get_attr: [ConfigBaseGenerate, userdata] }
      - config: { get_attr: [ConfigBase, userdata] }
      - config: { get_attr: [ConfigCustom, userdata] }
      - config: { get_attr: [install_docker_node, userdata] }

  CloudConfigInit:
    type: Lib::Stack::UserData::Init

  ConfigBaseGenerate:
    type: Lib::Stack::UserData::Config::Base::Generate
    properties:
      destfile: /root/install_config_base.cfg
      http_proxy: { get_param: http_proxy }
      no_proxy: { get_param: no_proxy }
      dns_nameservers: { get_param: dns_nameservers }
      dns_domainname: { get_param: dns_domainname }
      deploy_account: { get_param: deploy_account }
      deploy_account_ssh: { get_param: deploy_account_ssh }
      deploy_private_key: { get_param: deploy_private_key }
      deploy_public_key: { get_param: deploy_public_key }
      context: { get_param: context }
      stack: { get_param: stack }
      front_bastion_subnet_prefix: { get_param: front_bastion_subnet_prefix }
      front_subnet_prefix: { get_param: front_subnet_prefix }
      front_node_count: { get_param: front_node_count }
      bastion_node_count: { get_param: bastion_node_count }
      backup_account: { get_param: backup_account }
      env_file_system: { get_param: env_file_system }

  ConfigBase:
    type: Lib::Stack::UserData::Config::Base

  ConfigCustom:
    type: Lib::Stack::UserData::Config::Custom

  install_docker_node:
    type: Lib::Stack::UserData::Config::Docker
    properties:
      config_file: /root/install_config_base.cfg

outputs:
  userdata:
    value: { get_resource: userdata }
